/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseListUserDto } from '../models/api-response-list-user-dto';
import { ApiResponseListUserResponse } from '../models/api-response-list-user-response';
import { ApiResponseString } from '../models/api-response-string';
import { ApiResponseUserDto } from '../models/api-response-user-dto';
import { getAllUsers } from '../fn/user/get-all-users';
import { GetAllUsers$Params } from '../fn/user/get-all-users';
import { getAllUsersExceptSelf } from '../fn/user/get-all-users-except-self';
import { GetAllUsersExceptSelf$Params } from '../fn/user/get-all-users-except-self';
import { getCurrentUser } from '../fn/user/get-current-user';
import { GetCurrentUser$Params } from '../fn/user/get-current-user';
import { getUserById } from '../fn/user/get-user-by-id';
import { GetUserById$Params } from '../fn/user/get-user-by-id';


/**
 * User Endpoints
 */
@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCurrentUser()` */
  static readonly GetCurrentUserPath = '/api/v1/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser$Response(params?: GetCurrentUser$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return getCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser(params?: GetCurrentUser$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.getCurrentUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/api/v1/users/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserDto>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<ApiResponseUserDto> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserDto>): ApiResponseUserDto => r.body)
    );
  }

  /** Path part for operation `getAllUsersExceptSelf()` */
  static readonly GetAllUsersExceptSelfPath = '/api/v1/users/except-self';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersExceptSelf()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersExceptSelf$Response(params?: GetAllUsersExceptSelf$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListUserResponse>> {
    return getAllUsersExceptSelf(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersExceptSelf$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersExceptSelf(params?: GetAllUsersExceptSelf$Params, context?: HttpContext): Observable<ApiResponseListUserResponse> {
    return this.getAllUsersExceptSelf$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListUserResponse>): ApiResponseListUserResponse => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/v1/users/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListUserDto>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<ApiResponseListUserDto> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListUserDto>): ApiResponseListUserDto => r.body)
    );
  }

}
